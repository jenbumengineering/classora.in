// This is your Prisma schema file for MySQL production
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Note: Using String instead of enum for MySQL compatibility
// UserRole: "STUDENT" | "PROFESSOR" | "ADMIN"
// ContentStatus: "DRAFT" | "PUBLISHED" | "PRIVATE"
// QuizType: "MULTIPLE_CHOICE" | "MULTIPLE_SELECTION" | "SHORT_ANSWER"
// ProgrammingLanguage: "JAVA" | "C" | "CPP" | "CSHARP" | "PYTHON" | "MYSQL"

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          String    @default("STUDENT")
  avatar        String?
  bio           String?
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Professor relationships
  createdNotes      Note[]
  createdQuizzes    Quiz[]
  createdAssignments Assignment[]
  classes           Class[]
  teacherProfile    TeacherProfile?
  createdPracticeQuestions PracticeQuestion[] @relation("PracticeQuestionCreator")
  createdPracticeFiles PracticeFile[]
  createdCalendarEvents CalendarEvent[]
  settings UserSettings?
  notifications Notification[]
  sentInvitations Invitation[]

  // Student relationships
  enrollments       Enrollment[]
  quizAttempts      QuizAttempt[]
  assignmentSubmissions AssignmentSubmission[]
  practiceQuestionAttempts PracticeQuestionAttempt[] @relation("PracticeQuestionAttempts")
  studentProfile    StudentProfile?
  assignmentViews   StudentAssignmentView[]
  quizViews         StudentQuizView[]
  noteViews         StudentNoteView[]

  @@map("users")
}

model TeacherProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  university      String?
  college         String?
  department      String?
  address         String?
  phone           String?
  website         String?
  linkedin        String?
  researchInterests String?
  qualifications  String?
  experience      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("teacher_profiles")
}

model StudentProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  university      String?
  college         String?
  department      String?
  semester        String?
  class           String?
  registrationNo  String?
  rollNo          String?
  phone           String?
  address         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model Class {
  id          String    @id @default(cuid())
  name        String
  description String?
  code        String    @unique
  isPublic    Boolean   @default(false)
  gradientColor String? @default("from-blue-500 to-purple-600")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  enrollments Enrollment[]
  notes       Note[]
  quizzes     Quiz[]
  assignments Assignment[]
  practiceQuestions PracticeQuestion[]
  practiceFiles PracticeFile[]
  calendarEvents CalendarEvent[]

  @@map("classes")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  classId   String
  enrolledAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@map("enrollments")
}

model Note {
  id          String    @id @default(cuid())
  title       String
  content     String
  status      String    @default("DRAFT") // DRAFT, PUBLISHED, PRIVATE
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId     String
  views       StudentNoteView[]

  @@map("notes")
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  description String?
  timeLimit   Int?      // in minutes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId     String
  questions   QuizQuestion[]
  attempts    QuizAttempt[]
  views       StudentQuizView[]

  @@map("quizzes")
}

model QuizQuestion {
  id          String    @id @default(cuid())
  question    String
  type        String    // MULTIPLE_CHOICE, MULTIPLE_SELECTION, SHORT_ANSWER
  options     String?   // JSON string for multiple choice options
  correctAnswer String
  points      Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      String

  @@map("quiz_questions")
}

model QuizAttempt {
  id          String    @id @default(cuid())
  score       Float
  answers     String    // JSON string of answers
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  timeTaken   Int?      // in seconds

  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      String

  @@map("quiz_attempts")
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  points      Int       @default(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId     String
  submissions AssignmentSubmission[]
  views       StudentAssignmentView[]

  @@map("assignments")
}

model AssignmentSubmission {
  id            String    @id @default(cuid())
  content       String
  submittedAt   DateTime  @default(now())
  grade         Float?
  feedback      String?
  gradedAt      DateTime?
  gradedBy      String?

  // Relationships
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId  String

  @@map("assignment_submissions")
}

model PracticeQuestion {
  id          String    @id @default(cuid())
  title       String
  description String
  explanation String?
  difficulty  String    @default("MEDIUM") // EASY, MEDIUM, HARD
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  creator     User      @relation("PracticeQuestionCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId     String
  attempts    PracticeQuestionAttempt[] @relation("PracticeQuestionAttempts")

  @@map("practice_questions")
}

model PracticeQuestionAttempt {
  id          String    @id @default(cuid())
  answer      String
  isCorrect   Boolean
  attemptedAt DateTime  @default(now())

  // Relationships
  user        User      @relation("PracticeQuestionAttempts", fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  question    PracticeQuestion @relation("PracticeQuestionAttempts", fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String

  @@map("practice_question_attempts")
}

model PracticeFile {
  id          String    @id @default(cuid())
  title       String
  description String?
  filePath    String
  fileType    String
  fileSize    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId     String

  @@map("practice_files")
}

model CalendarEvent {
  id          String    @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  class       Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId     String

  @@map("calendar_events")
}

model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  theme           String   @default("light") // light, dark
  language        String   @default("en")
  timezone        String   @default("UTC")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Notification {
  id          String    @id @default(cuid())
  title       String
  message     String
  type        String    @default("INFO") // INFO, SUCCESS, WARNING, ERROR
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  // Relationships
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("notifications")
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  token       String    @unique
  role        String    @default("STUDENT") // STUDENT, PROFESSOR
  isAccepted  Boolean   @default(false)
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  // Relationships
  sentBy      User      @relation(fields: [sentById], references: [id], onDelete: Cascade)
  sentById    String

  @@map("invitations")
}

model StudentAssignmentView {
  id            String    @id @default(cuid())
  userId        String
  assignmentId  String
  viewedAt      DateTime  @default(now())

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment    Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([userId, assignmentId])
  @@map("student_assignment_views")
}

model StudentQuizView {
  id        String    @id @default(cuid())
  userId    String
  quizId    String
  viewedAt  DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz      Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
  @@map("student_quiz_views")
}

model StudentNoteView {
  id        String    @id @default(cuid())
  userId    String
  noteId    String
  viewedAt  DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  note      Note      @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@unique([userId, noteId])
  @@map("student_note_views")
}

model ContactMessage {
  id        String    @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean   @default(false)
  reply     String?
  repliedAt DateTime?
  createdAt DateTime  @default(now())

  @@map("contact_messages")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model Backup {
  id          String   @id @default(cuid())
  filename    String
  size        Int
  status      String   @default("PENDING") // PENDING, COMPLETED, FAILED
  createdAt   DateTime @default(now())
  completedAt DateTime?

  @@map("backups")
}
